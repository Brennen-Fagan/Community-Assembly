Species = species,
Environment = i)
},
abund = result$Abundance,
numSpecies = (ncol(result$Abundance) - 1) / result$NumEnvironments
)
Diversity <- dplyr::bind_rows(Diversity)
Diversity <- Diversity %>% dplyr::mutate(
Evenness = Entropy / log(Richness)
)
ggplot2::ggplot(
Diversity,
ggplot2::aes(
x = Time,
y = Richness,
color = factor(Environment),
alpha = ifelse(Environment == 1, 1, 0.3)
)
) + ggplot2::geom_line(
) + ggplot2::geom_line(
data = Diversity %>% dplyr::group_by(
Time
) %>% dplyr::summarise(
Richness = mean(Richness)
),
mapping = ggplot2::aes(
x = Time,
y = Richness
),
color = "black",
inherit.aes = FALSE
) + ggplot2::guides(
alpha = "none"
) + ggplot2::scale_color_discrete(
"Environment"
)
ggplot2::ggplot(
Diversity,
ggplot2::aes(
x = Time,
y = Entropy,
color = factor(Environment),
alpha = ifelse(Environment == 1, 1, 0.3)
)
) + ggplot2::geom_line(
) + ggplot2::geom_line(
data = Diversity %>% dplyr::group_by(
Time
) %>% dplyr::summarise(
Entropy = mean(Entropy)
),
mapping = ggplot2::aes(
x = Time,
y = Entropy
),
color = "black",
inherit.aes = FALSE
) + ggplot2::guides(
alpha = "none"
) + ggplot2::scale_color_discrete(
"Environment"
)
plotly::plot_ly(data = Diversity %>% dplyr::filter(Environment < 2),
x = ~Richness, y = ~Entropy, z = ~Time, type = "scatter3d",
mode = "lines", opacity = 1, line = list(color = ~Time))
ggplot2::ggplot(
Diversity,
ggplot2::aes(
x = Time,
y = Evenness,
color = factor(Environment),
alpha = ifelse(Environment == 1, 1, 0.3)
)
) + ggplot2::geom_line(
) + ggplot2::geom_line(
data = Diversity %>% dplyr::group_by(
Time
) %>% dplyr::summarise(
Evenness = mean(Evenness)
),
mapping = ggplot2::aes(
x = Time,
y = Evenness
),
color = "black",
inherit.aes = FALSE
) + ggplot2::guides(
alpha = "none"
) + ggplot2::scale_color_discrete(
"Environment"
)
EnvDiversity <- lapply(
1:((ncol(result$Abundance) - 1) / result$NumEnvironments),
function(i, abund, numSpecies) {
time <- abund[, 1]
env <- abund[, 1 + i + numSpecies * (1:result$NumEnvironments - 1)]
richness <- rowSums(env != 0)
abundSum <- rowSums(env)
environments <- apply(
env, MARGIN = 1,
FUN = function(x) {
toString(which(x > 0))
}
)
data.frame(Time = time,
Richness = richness,
Abundance = abundSum,
Species = i,
Environments = environments)
},
abund = result$Abundance,
numSpecies = (ncol(result$Abundance) - 1) / result$NumEnvironments
)
EnvDiversity <- dplyr::bind_rows(EnvDiversity)
ggplot2::ggplot(
EnvDiversity %>% dplyr::filter(Richness > 1),
aes(x = Time, y = Richness, color = Species)
) + geom_point(
alpha = 0.01, size = 3
) + guides(
color = "none"
)
with(EnvDiversity %>% mutate(
Time = floor(Time)
) %>% group_by(
Time, Species
) %>% summarise(
Richness = round(mean(Richness)),
.groups = "drop"
),
table(Species, Richness))
AveragedAbundance <- result$Abundance %>% data.frame(
) %>% dplyr::mutate(
time = floor(time/100)*100
) %>% dplyr::group_by(
time
) %>% dplyr::summarise(
dplyr::across(.fns = ~ mean(.x))
)
PCA <- prcomp(AveragedAbundance %>% dplyr::select_if(~ any(. > 0)),
center = TRUE, scale. = TRUE, rank. = 25)
head(summary(PCA)$importance[2, ])
sum(summary(PCA)$importance[2, ])
ggplot2::autoplot(PCA, loadings = TRUE,
data = AveragedAbundance %>% dplyr::select_if(~ any(. > 0)),
colour = "time")
AveragedPA <- result$Abundance %>% data.frame(
) %>% dplyr::mutate(
time = floor(time/100)*100
) %>% dplyr::mutate(
dplyr::across(.cols = !time, .fns = ~ .x > 0)
) %>% dplyr::group_by(
time
) %>% dplyr::summarise(
dplyr::across(.fns = ~ mean(.x))
)
PCAPA <- prcomp(AveragedPA %>% dplyr::select_if(~ any(. > 0)),
center = TRUE, scale. = TRUE, rank. = 25)
head(summary(PCAPA)$importance[2, ])
ggplot2::autoplot(PCAPA, loadings = TRUE,
data = AveragedPA %>% dplyr::select_if(~ any(. > 0)),
colour = "time")
sum(summary(PCA)$importance[2, ])
ifrm(AveragedAbundance)
ifrm(AveragedPA)
ifrm(PCA)
ifrm(PCAPA)
Environments <- lapply(
1:result$NumEnvironments,
function(i, abund, numSpecies) {
time <- abund[, 1]
env <- abund[, 1 + 1:numSpecies + numSpecies * (i - 1)]
retval <- data.frame(Environment = toString(i),
Time = time
)
retval <- cbind(retval, env)
colnames(retval) <- c("Environment", "Time",
paste0("Basal", 1:34),
paste0("Consumer", 35:100)
)
return(retval)
},
abund = result$Abundance %>% data.frame(
) %>% dplyr::mutate(
time = floor(time/100)*100
) %>% dplyr::group_by(
time
) %>% dplyr::summarise(
dplyr::across(.fns = ~ mean(.x))
),
numSpecies = (ncol(result$Abundance) - 1) / result$NumEnvironments
)
Environments <- dplyr::bind_rows(Environments)
Environments <- Environments %>% dplyr::filter(
dplyr::if_any(dplyr::starts_with(c("Basal", "Consumer")), ~ (.x != 0)),
)
EnvironmentDistance <- Environments %>% dplyr::select(
-Environment, -Time
) %>% vegan::vegdist(method = "jaccard")
EnvDistClust <- hclust(EnvironmentDistance)
plot(EnvDistClust, labels = FALSE)
EnvironmentDistancePA <- Environments %>% dplyr::select(
-Environment, -Time
) %>% vegan::vegdist(method = "jaccard", binary = TRUE)
EnvDistClustPA <- hclust(EnvironmentDistancePA)
plot(EnvDistClustPA, labels = FALSE)
load(file.path(
"..", "experiments", "MNA-FirstAttempt1e+06-Result-Env10-Line.RData")
)
toRemove <- result$Abundance <= result$Parameters$EliminationThreshold
result$Abundance[toRemove] <- 0
ifrm(Diversity)
ifrm(EnvDistClust)
ifrm(EnvDistClustPA)
ifrm(EnvDiversity)
ifrm(Environments)
ifrm(EnvironmentDistance)
ifrm(EnvironmentDistancePA)
load(file.path(
"..", "experiments", "MNA-FirstAttempt1e+06-Result-Env10-Line.RData")
)
toRemove <- result$Abundance <= result$Parameters$EliminationThreshold
result$Abundance[toRemove] <- 0
load(file.path(
"..", "experiments", "MNA-FirstAttempt1e+06-Result-Env10-Line.RData")
)
toRemove <- result$Abundance <= result$Parameters$EliminationThreshold
result$Abundance[toRemove] <- 0
gc()
load(file.path(
"..", "experiments", "MNA-FirstAttempt1e+06-Result-Env10-Line.RData")
)
toRemove <- result$Abundance <= result$Parameters$EliminationThreshold
result$Abundance[toRemove] <- 0
gc()
load(file.path(
"..", "experiments", "MNA-FirstAttempt1e+06-Result-Env10-Line.RData")
)
toRemove <- result$Abundance <= result$Parameters$EliminationThreshold
result$Abundance[toRemove[1:(length(toRemove)/2)]] <- 0
result$Abundance[toRemove[(length(toRemove)/2 + 1):length(toRemove)]] <- 0
ifrm(toRemove)
LawMorton1996_PlotAbundance(result$Abundance[seq(from = 1,
to = nrow(result$Abundance),
by = 10), c(1, 2:101)]) -> obj;
obj + ggplot2::scale_y_log10() + ggplot2::guides(color = FALSE)
Diversity <- lapply(
1:result$NumEnvironments,
function(i, abund, numSpecies) {
time <- abund[, 1]
env <- abund[, 1 + 1:numSpecies + numSpecies * (i - 1)]
richness <- rowSums(env != 0)
abundSum <- rowSums(env)
entropy <- env / abundSum
entropy <- - apply(
entropy, MARGIN = 1,
FUN = function(x) {
sum(ifelse(x != 0, x * log(x), 0))
})
species <- apply(
env, MARGIN = 1,
FUN = function(x) {
toString(which(x > 0))
}
)
data.frame(Time = time,
Richness = richness,
Entropy = entropy,
Species = species,
Environment = i)
},
abund = result$Abundance,
numSpecies = (ncol(result$Abundance) - 1) / result$NumEnvironments
)
Diversity <- dplyr::bind_rows(Diversity)
Diversity <- Diversity %>% dplyr::mutate(
Evenness = Entropy / log(Richness)
)
ggplot2::ggplot(
Diversity,
ggplot2::aes(
x = Time,
y = Richness,
color = factor(Environment),
alpha = ifelse(Environment == 1, 1, 0.3)
)
) + ggplot2::geom_line(
) + ggplot2::geom_line(
data = Diversity %>% dplyr::group_by(
Time
) %>% dplyr::summarise(
Richness = mean(Richness)
),
mapping = ggplot2::aes(
x = Time,
y = Richness
),
color = "black",
inherit.aes = FALSE
) + ggplot2::guides(
alpha = "none"
) + ggplot2::scale_color_discrete(
"Environment"
)
ggplot2::ggplot(
Diversity,
ggplot2::aes(
x = Time,
y = Entropy,
color = factor(Environment),
alpha = ifelse(Environment == 1, 1, 0.3)
)
) + ggplot2::geom_line(
) + ggplot2::geom_line(
data = Diversity %>% dplyr::group_by(
Time
) %>% dplyr::summarise(
Entropy = mean(Entropy)
),
mapping = ggplot2::aes(
x = Time,
y = Entropy
),
color = "black",
inherit.aes = FALSE
) + ggplot2::guides(
alpha = "none"
) + ggplot2::scale_color_discrete(
"Environment"
)
plotly::plot_ly(data = Diversity %>% dplyr::filter(Environment < 2),
x = ~Richness, y = ~Entropy, z = ~Time, type = "scatter3d",
mode = "lines", opacity = 1, line = list(color = ~Time))
ggplot2::ggplot(
Diversity,
ggplot2::aes(
x = Time,
y = Evenness,
color = factor(Environment),
alpha = ifelse(Environment == 1, 1, 0.3)
)
) + ggplot2::geom_line(
) + ggplot2::geom_line(
data = Diversity %>% dplyr::group_by(
Time
) %>% dplyr::summarise(
Evenness = mean(Evenness)
),
mapping = ggplot2::aes(
x = Time,
y = Evenness
),
color = "black",
inherit.aes = FALSE
) + ggplot2::guides(
alpha = "none"
) + ggplot2::scale_color_discrete(
"Environment"
)
EnvDiversity <- lapply(
1:((ncol(result$Abundance) - 1) / result$NumEnvironments),
function(i, abund, numSpecies) {
time <- abund[, 1]
env <- abund[, 1 + i + numSpecies * (1:result$NumEnvironments - 1)]
richness <- rowSums(env != 0)
abundSum <- rowSums(env)
environments <- apply(
env, MARGIN = 1,
FUN = function(x) {
toString(which(x > 0))
}
)
data.frame(Time = time,
Richness = richness,
Abundance = abundSum,
Species = i,
Environments = environments)
},
abund = result$Abundance,
numSpecies = (ncol(result$Abundance) - 1) / result$NumEnvironments
)
EnvDiversity <- dplyr::bind_rows(EnvDiversity)
ggplot2::ggplot(
EnvDiversity %>% dplyr::filter(Richness > 1),
aes(x = Time, y = Richness, color = Species)
) + geom_point(
alpha = 0.01, size = 3
) + guides(
color = "none"
)
with(EnvDiversity %>% mutate(
Time = floor(Time)
) %>% group_by(
Time, Species
) %>% summarise(
Richness = round(mean(Richness)),
.groups = "drop"
),
table(Species, Richness))
AveragedAbundance <- result$Abundance %>% data.frame(
) %>% dplyr::mutate(
time = floor(time/100)*100
) %>% dplyr::group_by(
time
) %>% dplyr::summarise(
dplyr::across(.fns = ~ mean(.x))
)
PCA <- prcomp(AveragedAbundance %>% dplyr::select_if(~ any(. > 0)),
center = TRUE, scale. = TRUE, rank. = 25)
result$Parameters$EliminationThreshold
result$Abundance
colSums(result$Abundance)
which(colSums(result$Abundance) > 0)
names(which(colSums(result$Abundance) > 0))
result$Abundance[, 1]
any(result$Abundance[, 1] > 0)
names(result$Abundance[, 1])
names(result$Abundance)
colnames(result$Abundance)
library(dplyr)     # Data Manipulation
library(ggplot2)   # 2-D Plot
library(plotly)    # 3-D Plot
library(ggfortify) # used for biplots of PCAs
library(vegan)     # Ecological analysis mega-package
library(RMTRCode2)
# https://stackoverflow.com/a/7172832
ifrm <- function(obj, env = globalenv()) {
obj <- deparse(substitute(obj))
if(exists(obj, envir = env)) {
rm(list = obj, envir = env)
}
}
load(file.path(
"..", "experiments", "MNA-FirstAttempt-Result-Env10-None.RData")
)
toRemove <- result$Abundance <= result$Parameters$EliminationThreshold
result$Abundance[toRemove] <- 0
ifrm(toRemove)
Diversity <- lapply(
1:result$NumEnvironments,
function(i, abund, numSpecies) {
time <- abund[, 1]
env <- abund[, 1 + 1:numSpecies + numSpecies * (i - 1)]
richness <- rowSums(env != 0)
abundSum <- rowSums(env)
entropy <- env / abundSum
entropy <- - apply(
entropy, MARGIN = 1,
FUN = function(x) {
sum(ifelse(x != 0, x * log(x), 0))
})
species <- apply(
env, MARGIN = 1,
FUN = function(x) {
toString(which(x > 0))
}
)
data.frame(Time = time,
Richness = richness,
Entropy = entropy,
Species = species,
Environment = i)
},
abund = result$Abundance,
numSpecies = (ncol(result$Abundance) - 1) / result$NumEnvironments
)
Diversity <- dplyr::bind_rows(Diversity)
Diversity <- Diversity %>% dplyr::mutate(
Evenness = Entropy / log(Richness)
)
ggplot2::ggplot(
Diversity,
ggplot2::aes(
x = Time,
y = Richness,
color = factor(Environment),
alpha = ifelse(Environment == 1, 1, 0.3)
)
) + ggplot2::geom_line(
) + ggplot2::geom_line(
data = Diversity %>% dplyr::group_by(
Time
) %>% dplyr::summarise(
Mean = mean(Richness),
SpeciesTotal = toString(sort(unique(unlist(strsplit(paste(
Species, collapse = ", "), split = ", ", fixed = TRUE))))),
Gamma = unlist(lapply(strsplit(
SpeciesTotal, split = ", ", fixed = TRUE), length))
) %>% tidyr::pivot_longer(
cols = c(Mean, Gamma),
names_to = "Aggregation",
values_to = "Richness"
),
mapping = ggplot2::aes(
x = Time,
y = Richness,
linetype = Aggregation
),
color = "black",
inherit.aes = FALSE
) + ggplot2::guides(
alpha = "none"
) + ggplot2::scale_color_discrete(
"Environment"
)
gc()
remove.packages("RMTRCode2", lib="~/Random-Matrix-Theory/RMTRCode2/renv/library/R-4.1/x86_64-w64-mingw32")
library(RMTRCode2)
'a' %c% 'b'
temp <- 1
get('temp')
get('hi')
