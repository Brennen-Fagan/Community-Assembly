get('temp')
get('hi')
sample(LETTERS)
c(runif(10000), sample(LETTERS))
sample(iris)
Matrix::diag
?deSolve::ode
temp <- 1:10
subset(temp, 2)
subset(temp, rep(1:5, 2))
subset(temp, factor(rep(1:5, 2)))
(rep(1:5, 2))
(rep(1:5, by = 2))
(rep(1:5, each = 2))
subset(temp, factor(rep(1:5, each = 2)))
?subset
?runif
pnorm(0)
pnorm(1)
qnorm(0.5)
load("~/Random-Matrix-Theory/RMTRCode2/experiments/MNA-FirstAttempt-PoolMats-Env10.RData")
Pool$Size
Pool$Type
?cheddar::FlowBasedTrophicLevel
cheddar::TrophicLevels
cheddar::PlotWebByLevel
?cheddar::PlotWebByLevel
data(TL84)
library(Cheddar)
library(cheddar)
data(TL84)
temp <- PlotWebByLevel(TL84, ylim=c(1,5.8), main='Prey-averaged')
temp
TL84
PlotWebByLevel(TL84, ylim=c(1,5.8), level='ChainAveragedTrophicLevel',
main='Chain-averaged')
cheddar::TrophicLevels(TL84)
remove.packages("RMTRCode2", lib="~/Random-Matrix-Theory/RMTRCode2/renv/library/R-4.1/x86_64-w64-mingw32")
library(RMTRCode2)
source("~/Random-Matrix-Theory/RMTRCode2/experiments/Tests-MultipleCommunityAssembly.R")
egResults_Dispersal3 <- MultipleNumericalAssembly_Dispersal(
Pool = egPool,
NumEnvironments = numEnviron,
InteractionMatrices = egInteractions,
Events = egEvents,
PerCapitaDynamics = egDynamics,
DispersalMatrix = egDispersal,
EliminationThreshold = 10^-4, ArrivalDensity = 0.4,
CalculateTrophicStructure = TRUE
Verbose = TRUE
)
egResults_Dispersal3 <- MultipleNumericalAssembly_Dispersal(
Pool = egPool,
NumEnvironments = numEnviron,
InteractionMatrices = egInteractions,
Events = egEvents,
PerCapitaDynamics = egDynamics,
DispersalMatrix = egDispersal,
EliminationThreshold = 10^-4, ArrivalDensity = 0.4,
CalculateTrophicStructure = TRUE,
Verbose = TRUE
)
remove.packages("RMTRCode2", lib="~/Random-Matrix-Theory/RMTRCode2/renv/library/R-4.1/x86_64-w64-mingw32")
library(RMTRCode2)
source("~/Random-Matrix-Theory/RMTRCode2/experiments/Tests-MultipleCommunityAssembly.R")
egInteractions
egPool
library(RMTRCode2)
source("~/Random-Matrix-Theory/RMTRCode2/experiments/Tests-MultipleCommunityAssembly.R")
egResults_Dispersal3 <- MultipleNumericalAssembly_Dispersal(
Pool = egPool,
NumEnvironments = numEnviron,
InteractionMatrices = egInteractions,
Events = egEvents,
PerCapitaDynamics = egDynamics,
DispersalMatrix = egDispersal,
EliminationThreshold = 10^-4, ArrivalDensity = 0.4,
CalculateTrophicStructure = TRUE,
Verbose = TRUE
)
egResults_Dispersal3 <- MultipleNumericalAssembly_Dispersal(
Pool = egPool,
NumEnvironments = numEnviron,
InteractionMatrices = egInteractions,
Events = egEvents,
PerCapitaDynamics = egDynamics,
DispersalMatrix = egDispersal,
EliminationThreshold = 10^-4, ArrivalDensity = 0.4,
CalculateTrophicStructure = TRUE,
Verbose = TRUE
)
cheddar::Community(nodes = NULL)
cheddar::Community(nodes = matrix())
cheddar::Community(nodes = data.frame())
cheddar::Community(nodes = data.frame(nodes = NULL))
cheddar::Community(nodes = data.frame())
remove.packages("RMTRCode2", lib="~/Random-Matrix-Theory/RMTRCode2/renv/library/R-4.1/x86_64-w64-mingw32")
library(RMTRCode2)
source("~/Random-Matrix-Theory/RMTRCode2/experiments/Tests-MultipleCommunityAssembly.R")
`%>%` <- dplyr::`%>%`
3 %>% c(2)
remove.packages("RMTRCode2", lib="~/Random-Matrix-Theory/RMTRCode2/renv/library/R-4.1/x86_64-w64-mingw32")
library(RMTRCode2)
source("~/Random-Matrix-Theory/RMTRCode2/experiments/Tests-MultipleCommunityAssembly.R")
cheddar::Community(nodes = data.frame(nodes = "s1"))
cheddar::Community(nodes = data.frame(nodes = "s1"), properties = list( title = ""))
cheddar::Community(nodes = data.frame(nodes = "s1"), properties = list( title = "N"))
cheddar::Community(nodes = data.frame(node = "s1"), properties = list( title = "N"))
cheddar::Community(nodes = data.frame(node = "s1"), properties = list( title = ""))
cheddar::Community(nodes = data.frame(node = "s1"), properties = list( title = " "))
remove.packages("RMTRCode2", lib="~/Random-Matrix-Theory/RMTRCode2/renv/library/R-4.1/x86_64-w64-mingw32")
library(RMTRCode2)
source("~/Random-Matrix-Theory/RMTRCode2/experiments/Tests-MultipleCommunityAssembly.R")
remove.packages("RMTRCode2", lib="~/Random-Matrix-Theory/RMTRCode2/renv/library/R-4.1/x86_64-w64-mingw32")
library(RMTRCode2)
source("~/Random-Matrix-Theory/RMTRCode2/experiments/Tests-MultipleCommunityAssembly.R")
egEvents
short <- egEvents
short$Events
short$Events <- short$Events[1:4, ]
egResults_Dispersal3 <- MultipleNumericalAssembly_Dispersal(
Pool = egPool,
NumEnvironments = numEnviron,
InteractionMatrices = egInteractions,
Events = short,
PerCapitaDynamics = egDynamics,
DispersalMatrix = egDispersal,
EliminationThreshold = 10^-4, ArrivalDensity = 0.4,
CalculateTrophicStructure = TRUE,
Verbose = TRUE
)
egResults_Dispersal3 <- MultipleNumericalAssembly_Dispersal(
Pool = egPool,
NumEnvironments = numEnviron,
InteractionMatrices = egInteractions,
Events = short,
PerCapitaDynamics = egDynamics,
DispersalMatrix = egDispersal,
EliminationThreshold = 10^-4, ArrivalDensity = 0.4,
CalculateTrophicStructure = TRUE, MaximumTimeStep = 10
Verbose = TRUE
)
egResults_Dispersal3 <- MultipleNumericalAssembly_Dispersal(
Pool = egPool,
NumEnvironments = numEnviron,
InteractionMatrices = egInteractions,
Events = short,
PerCapitaDynamics = egDynamics,
DispersalMatrix = egDispersal,
EliminationThreshold = 10^-4, ArrivalDensity = 0.4,
CalculateTrophicStructure = TRUE, MaximumTimeStep = 10,
Verbose = TRUE
)
egResults_Dispersal3
deSolve::lsoda()
?deSolve::lsoda
remove.packages("RMTRCode2", lib="~/Random-Matrix-Theory/RMTRCode2/renv/library/R-4.1/x86_64-w64-mingw32")
library(RMTRCode2)
debugSource("~/Random-Matrix-Theory/RMTRCode2/experiments/Tests-MultipleCommunityAssembly.R")
debug(Dynamics)
trophic
list(
Derivatives = ydot,
GraphData = trophic$EdgeVertexLists#,
#TrophicLevels = trophic$TrophicLevels
)
.Last.value[[1]]
remove.packages("RMTRCode2", lib="~/Random-Matrix-Theory/RMTRCode2/renv/library/R-4.1/x86_64-w64-mingw32")
library(RMTRCode2)
source("~/Random-Matrix-Theory/RMTRCode2/experiments/Tests-MultipleCommunityAssembly.R")
egResults_Dispersal3
egTrophicFunction <- CalculateTrophicStructure(
Pool = egPool,
NumEnvironments = numEnviron,
InteractionMatrices = egInteractions,
EliminationThreshold = 10^-4
)
egTrophicLevels <- apply(
egResults_Dispersal2$Abundance[, -1], # No Time Column
MARGIN = 1, # Rows
FUN = egTrophicFunction
)
egTrophicLevels[[1]]$EdgeVertexLists
egTrophicLevels[[1]]$TrophicLevels
egTrophicLevels[[367]]$TrophicLevels
egTrophicLevels[[100]]$TrophicLevels
egTrophicLevels[[105]]$TrophicLevels
egTrophicLevels[[125]]$TrophicLevels
egTrophicLevels[[125]]$EdgeVertexLists
110 * 0.550 / (110 * 0.550 + 0.450 * 0.844)
sapply(egTrophicLevels, function(lst) {
length(lst$EdgeVertexList) == numEnviron &&
all(sapply(lst$EdgeVertexList, function(lst2)
all(lst2$Edges$effectNormalised >= 0) &&
all(lst2$Edges$effectNormalised <= 1) &&
all(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = sum(effectNormalised) == 1) %>% dplyr::pull(test))
))
}
)
egTrophicLevels[[1]]
sapply(egTrophicLevels, function(lst) {
length(lst$EdgeVertexList) == numEnviron &&
all(sapply(lst$EdgeVertexList, function(lst2)
(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
(all(lst2$Edges$effectNormalised >= 0) &&
all(lst2$Edges$effectNormalised <= 1) &&
all(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = sum(effectNormalised) == 1) %>% dplyr::pull(test))
)))
}
)
library(dplyr)
sapply(egTrophicLevels, function(lst) {
length(lst$EdgeVertexList) == numEnviron &&
all(sapply(lst$EdgeVertexList, function(lst2)
(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
(all(lst2$Edges$effectNormalised >= 0) &&
all(lst2$Edges$effectNormalised <= 1) &&
all(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = sum(effectNormalised) == 1) %>% dplyr::pull(test))
)))
}
)
isTRUE(identical(1, 0.9999999999999999999999999999999999999999999999999999999))
sapply(egTrophicLevels, function(lst) {
length(lst$EdgeVertexList) == numEnviron &&
all(sapply(lst$EdgeVertexList, function(lst2)
(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
(all(lst2$Edges$effectNormalised >= 0) &&
all(lst2$Edges$effectNormalised <= 1) &&
all(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = isTRUE(identical(sum(effectNormalised), 1)) %>% dplyr::pull(test))
)))
}
)
sapply(egTrophicLevels, function(lst) {
length(lst$EdgeVertexList) == numEnviron &&
all(sapply(lst$EdgeVertexList, function(lst2)
(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
(all(lst2$Edges$effectNormalised >= 0) &&
all(lst2$Edges$effectNormalised <= 1) &&
all(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = isTRUE(identical(sum(effectNormalised), 1))) %>% dplyr::pull(test))
)))
}
)
sapply(egTrophicLevels, function(lst) {
length(lst$EdgeVertexList) == numEnviron &&
all(sapply(lst$EdgeVertexList, function(lst2)
(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
(all(lst2$Edges$effectNormalised >= 0) &&
all(lst2$Edges$effectNormalised <= 1) #&&
#all(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = isTRUE(identical(sum(effectNormalised), 1))) %>% dplyr::pull(test))
)))
}
)
sapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(sapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = isTRUE(identical(sum(effectNormalised), 1))) %>% dplyr::pull(test))
)))
}
)
sapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(sapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = isTRUE(identical(sum(effectNormalised), 1))) %>% dplyr::pull(test))
))#)
}
)
sapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(sapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
if (!is.na(lst2$Edges) && is.na(lst2$Vertices)))
(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = isTRUE(identical(sum(effectNormalised), 1))) %>% dplyr::pull(test))
))#)
}
)
sapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(sapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
if (!is.na(lst2$Edges) && is.na(lst2$Vertices))#)
(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = isTRUE(identical(sum(effectNormalised), 1))) %>% dplyr::pull(test))
))#)
}
)
sapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(lapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
if (!is.na(lst2$Edges) && is.na(lst2$Vertices))#)
(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = isTRUE(identical(sum(effectNormalised), 1))) %>% dplyr::pull(test))
))#)
}
)
lapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(lapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
if (!is.na(lst2$Edges) && is.na(lst2$Vertices))#)
(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = isTRUE(identical(sum(effectNormalised), 1))) %>% dplyr::pull(test))
))#)
}
)
lapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(lapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
if (!(is.na(lst2$Edges) && is.na(lst2$Vertices)))
(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = isTRUE(identical(sum(effectNormalised), 1))) %>% dplyr::pull(test))
))#)
}
)
lapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(lapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
if (!(is.na(lst2$Edges) && is.na(lst2$Vertices)))
(lst2$Edges %>% dplyr::group_by(to) %>% dplyr::summarise(test = #isTRUE(identical(
sum(effectNormalised)#, 1))
) %>% dplyr::pull(test))
))#)
}
)
egTrophicLevels[[125]]$EdgeVertexLists
lapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(lapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
if (!(is.na(lst2$Edges) && is.na(lst2$Vertices)))
(lst2$Edges %>% dplyr::group_by(to, effectSign) %>% dplyr::summarise(test = #isTRUE(identical(
sum(effectNormalised)#, 1))
) %>% dplyr::pull(test))
))#)
}
)
lapply(egTrophicLevels, function(lst) {
length(lst$EdgeVertexList) == numEnviron &&
all
(lapply(lst$EdgeVertexList, function(lst2)
(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
(all(lst2$Edges$effectNormalised >= 0) &&
all(lst2$Edges$effectNormalised <= 1) &&
all
if (!(is.na(lst2$Edges) && is.na(lst2$Vertices)))
(lst2$Edges %>% dplyr::group_by(to, effectSign) %>% dplyr::summarise(.groups = "drop",
test = isTRUE(identical(
sum(effectNormalised), 1))
) %>% dplyr::pull(test))
)))
}
)
stopifnot(
sapply(egTrophicLevels, function(lst) {
length(lst$EdgeVertexList) == numEnviron &&
all
(sapply(lst$EdgeVertexList, function(lst2)
(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
(all(lst2$Edges$effectNormalised >= 0) &&
all(lst2$Edges$effectNormalised <= 1) &&
all(lst2$Edges %>% dplyr::group_by(
to, effectSign
) %>% dplyr::summarise(
.groups = "drop",
test = isTRUE(identical(sum(effectNormalised), 1))
) %>% dplyr::pull(test))
)))
})
)
stopifnot(
sapply(egTrophicLevels, function(lst) {
(length(lst$EdgeVertexList) == numEnviron) &&
all(sapply(lst$EdgeVertexList, function(lst2)
(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
(all(lst2$Edges$effectNormalised >= 0) &&
all(lst2$Edges$effectNormalised <= 1) &&
all(lst2$Edges %>% dplyr::group_by(
to, effectSign
) %>% dplyr::summarise(
.groups = "drop",
test = isTRUE(identical(sum(effectNormalised), 1))
) %>% dplyr::pull(test))
)
))
})
)
sapply(egTrophicLevels, function(lst) {
(length(lst$EdgeVertexList) == numEnviron) &&
all(sapply(lst$EdgeVertexList, function(lst2)
(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
(all(lst2$Edges$effectNormalised >= 0) &&
all(lst2$Edges$effectNormalised <= 1) &&
all(lst2$Edges %>% dplyr::group_by(
to, effectSign
) %>% dplyr::summarise(
.groups = "drop",
test = isTRUE(identical(sum(effectNormalised), 1))
) %>% dplyr::pull(test))
)
))
})
lapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(lapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
if (!(is.na(lst2$Edges) && is.na(lst2$Vertices)))
(lst2$Edges %>% dplyr::group_by(to, effectSign) %>% dplyr::summarise(test = #isTRUE(identical(
sum(effectNormalised)#, 1))
) %>% dplyr::pull(test))
))#)
}
)
.Last.value[[125]]
lapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(lapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
if (!(is.na(lst2$Edges) && is.na(lst2$Vertices)))
(lst2$Edges %>% dplyr::group_by(to, effectSign) %>% dplyr::summarise(test = isTRUE(identical(
sum(effectNormalised), 1))
) %>% dplyr::pull(test))
))#)
}
)
lapply(egTrophicLevels, function(lst) {
#length(lst$EdgeVertexList) == numEnviron &&
#all
(lapply(lst$EdgeVertexList, function(lst2)
#(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
#(all(lst2$Edges$effectNormalised >= 0) &&
#all(lst2$Edges$effectNormalised <= 1) #&&
#all
if (!(is.na(lst2$Edges) && is.na(lst2$Vertices)))
(lst2$Edges %>% dplyr::group_by(to, effectSign) %>% dplyr::summarise(test = #isTRUE(identical(
sum(effectNormalised)#, 1))
) %>% dplyr::pull(test))
))#)
}
) -> temp
temp[[367]]
temp[[367]][[5]]
identical(temp[[367]][[5]], 1)
identical(temp[[367]][[5]][1], 1)
all.equal(temp[[367]][[5]][1], 1)
temp[[367]][[5]][1]
temp[[367]][[5]][1] == 1
temp[[367]][[5]][1]
all.equal
identical
stopifnot(
sapply(egTrophicLevels, function(lst) {
(length(lst$EdgeVertexList) == numEnviron) &&
all(sapply(lst$EdgeVertexList, function(lst2)
(is.na(lst2$Edges) && is.na(lst2$Vertices)) ||
(all(lst2$Edges$effectNormalised >= 0) &&
all(lst2$Edges$effectNormalised <= 1) &&
all(lst2$Edges %>% dplyr::group_by(
to, effectSign
) %>% dplyr::summarise(
.groups = "drop",
test = isTRUE(all.equal(sum(effectNormalised), 1))
) %>% dplyr::pull(test))
)
))
})
)
remove.packages("RMTRCode2", lib="~/Random-Matrix-Theory/RMTRCode2/renv/library/R-4.1/x86_64-w64-mingw32")
library(RMTRCode2)
