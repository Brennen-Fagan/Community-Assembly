Community Assembly
========================================================
author: Brennen Fagan
date: 2021-05-24
autosize: true

The Project
========================================================
Investigating the relationship between species translocation and biodiversity.
Comparing human driven effects to ecological and evolutionary effects.
Two sub-projects:
- Evolutionary/Species
- Ecological/Community

***
![Adapted from Kagawa and Takimoto, 2017](RemixKagawaTakimoto2017Fig1.png)

<!--![Generic Island - Continent Figure](GenericContinentIsland.png)-->

```{r, fig.align='center', echo = FALSE}
library(ggplot2)
library(ggforce)

set.seed(7)

plotdat1 <- data.frame(
  Species = as.character(c(
    rep(1:6, 4),
    1, 1, 5, 6
    )),
  x = c(rep(2, 6 * 4), rep(1, 4)),
  y = 0
)

ggplot(
  plotdat1,
  aes(x = x, y = y, color = Species, shape = Species)
) + geom_jitter(
  width = 0.25
) + geom_circle(
  aes(x0 = 2, y0 = 0, r = 0.5),
  inherit.aes = FALSE
) + geom_circle(
  aes(x0 = 1, y0 = 0, r = 0.25),
  inherit.aes = FALSE
) + annotate(
  "text",
  x = c(1, 2),
  y = c(0.375, 0.55),
  label = c("Island", "Continent")
) + geom_segment(
  aes(x = 1.5, y = 0, xend = 1.25, yend = 0),
  size = 1, arrow = arrow(length = unit(0.5, 'cm')),
  inherit.aes = FALSE
) + theme_minimal(
) + theme(
  axis.text.x = element_blank(),
  axis.ticks.x = element_blank(),
  axis.text.y = element_blank(),
  axis.ticks.y = element_blank()
) + labs(x = "", y = "")
```

Plot
========================================================
<iframe src = "scaling.html" position:absolute height=100% width=100%><\iframe>

Law and Morton, 1996
========================================================
- Pool: Species that can invade the island.
- Community: Species present on the island.
- Lotka-Volterra: (Exploitation) Predatory-Prey dynamics.
- Two species classes: Basal and Consumer.
- Size structured population (thinking macroecology).
- Separate time scales: fast ecology, slow assembly.

***

```{r loadDat, echo = FALSE}
# Reserved Names
candidateData <- NULL
islandInteractionsOneEmptyTwoWhich <- NULL
islandInteractionsOneTwo <- NULL
islandInteractionsOneTwoWhich <- NULL
mats <- NULL
paramFrame <- NULL
plotScalingData <- NULL
pools <- NULL


ellipsisApply <- function(..., FUN) {
  lapply(as.list(...), FUN)
}

dirthis <- getwd()
dirdat <- file.path(dirthis,
                    #"..",
                    "experiments")

load(file.path(dirdat, "LM1996-NumPoolCom-QDat-2021-05.RData"))
# Stop if not all are not null
stopifnot(all(unlist(ellipsisApply(
  FUN = function(bool) {!is.null(bool)},
  candidateData,
  islandInteractionsOneEmptyTwo,
  islandInteractionsOneEmptyTwoWhich,
  islandInteractionsOneTwo,
  islandInteractionsOneTwoWhich,
  mats,
  paramFrame,
  plotScalingData,
  pools
))))
```

```{r testPlot, echo=FALSE, results = 'hide'}
library(plotly)
library(htmlwidgets)

plotScaling <- plotly::plot_ly(
  plotScalingData,
  x = ~Basals,
  y = ~Consumers,
  z = ~CommunitySize,
  color = ~Dataset,
  colors = c("red", "blue", "black")
)

plotScaling <- plotly::add_markers(plotScaling)

plotScaling <- plotly::layout(
  plotScaling,
  scene = list(
    xaxis = list(type = "log"),
    yaxis = list(type = "log"),
    camera = list(
      eye = list(
        x = -1.25, y = -1.25, z = .05
      )
    )
  )
)

htmlwidgets::saveWidget(as_widget(plotScaling), file = file.path(dirthis, 'presentations', "scaling.html"))
#https://stackoverflow.com/q/39035308
```
<iframe src = "scaling.html" position:absolute height=100% width=100%><\iframe>

Early Results
========================================================

Future Work
========================================================
- Changing interaction types
- Changing functional forms
